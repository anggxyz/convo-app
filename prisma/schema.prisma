// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EventType {
  JUNTO
}

model Event {
  id                 String    @id @default(uuid())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  title              String
  descriptionHtml    String?
  startDateTime      DateTime
  endDateTime        DateTime
  location           String
  hash               String
  series             Boolean
  limit              Int
  gCalEventRequested Boolean   @default(false)
  gCalEventId        String?
  gCalId             String?
  type               EventType @default(JUNTO)
  proposerId         String
  proposer           User      @relation(fields: [proposerId], references: [id], onDelete: Cascade)
  rsvps              Rsvp[]
  // @todo add forum link here
  // based on Stewards' discussion on May 29, 2023
  // we decided to keep emails association with Events
  // and not Attendees (or Users) to enable Hosts to be
  // able to see attendee emails (for [continuity](@todo add link here))
  // but the database does not hold any association with
  // emails <> eth addresses
  // as soon as an event's endDateTime is in the past
  // we clear this field on this model @todo
  emails             String[]
}

model User {
  id       String  @id @default(uuid())
  address  String  @unique
  events   Event[]
  rsvps    Rsvp[]
  nickname String  @default("Anonymous")
}

model Rsvp {
  id         String @id @default(uuid())
  eventId    String
  event      Event  @relation(fields: [eventId], references: [id])
  attendeeId String
  attendee   User   @relation(fields: [attendeeId], references: [id])

  @@unique([eventId, attendeeId])
}

//  @help is there a better way to manage auth tokens?
// plisss teach me
model Google {
  id                      String   @id @default(uuid())
  createdAt               DateTime  @default(now())

  // credentials
  clientId                String @unique
  projectId               String
  authUri                 String
  tokenUri                String
  authProviderX509CertUrl String
  clientSecret            String
  redirectUris            String[]
  javascriptOrigins       String[]

  // token
  accessToken             String
  refreshToken            String
  scope                   String
  tokenType               String
  expiryDate              String
}

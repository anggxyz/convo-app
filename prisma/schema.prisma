// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EventType {
  JUNTO
  INTERVIEW // @note could be "unlisted" @anggxyz
  TEST
}

model Event {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  title           String
  descriptionHtml String?
  startDateTime   DateTime
  endDateTime     DateTime
  location        String
  hash            String
  series          Boolean
  limit           Int

  // for deleted events
  // can be purged periodically
  isDeleted Boolean @default(false)

  // google
  gCalEventRequested Boolean      @default(false)
  gCalEventId        String?
  gCalId             String?
  type               EventType    @default(JUNTO)
  proposerId         String
  proposer           User         @relation(fields: [proposerId], references: [id], onDelete: Cascade)
  rsvps              Rsvp[]
  collections        Collection[]
  // if the event was imported from convo.kernel.community
  // if it was, we do not have their RSVPs, since this version uses
  // user's addresses to make them unique and the previous version used
  // email addresses
  // having isImported = true, means
  // the UI will show an info box mentioning "This event was imported from the previous version of the app
  // and the total number of RSVPs might not be accurate. Please email
  // if you'd like to query any data related to RSVPs for this particular event"
  // the emails[], gcaleventREquested, gcalEventId will be accurate for these events
  // the proposer data will be inaccurate
  isImported         Boolean      @default(false)
}

model User {
  id          String       @id @default(uuid())
  email       String?      @unique
  address     String?      @unique
  nickname    String       @default("Anonymous")
  events      Event[]
  rsvps       Rsvp[]
  collections Collection[]
}

model Collection {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  events    Event[]
}

model Rsvp {
  id                      String   @id @default(uuid())
  createdAt               DateTime @default(now())
  eventId                 String
  event                   Event    @relation(fields: [eventId], references: [id])
  attendeeId              String
  attendee                User     @relation(fields: [attendeeId], references: [id])
  isAddedToGoogleCalendar Boolean  @default(false)

  @@unique([eventId, attendeeId])
}

//  @help is there a better way to manage auth tokens?
// plisss teach me
model Google {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  // credentials
  clientId                String   @unique
  projectId               String
  authUri                 String
  tokenUri                String
  authProviderX509CertUrl String
  clientSecret            String
  redirectUris            String[]
  javascriptOrigins       String[]

  // token
  accessToken  String
  refreshToken String
  scope        String
  tokenType    String
  expiryDate   String
}

model Slack {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  botToken  String
  channel   String

  @@unique([botToken, channel])
}
